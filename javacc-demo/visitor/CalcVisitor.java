//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class CalcVisitor implements GJNoArguVisitor<Integer> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Integer visit(NodeList n) {
      Integer _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Integer visit(NodeListOptional n) {
      if (n.present()) {
         Integer _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public Integer visit(NodeOptional n) {
      if (n.present())
         return n.node.accept(this);
      else
         return null;
   }

   public Integer visit(NodeSequence n) {
      Integer _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Integer visit(NodeToken n) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   Map<String, Integer> valMap = new HashMap<>();

   /**
    * f0 -> ( AssignmentStatement() )*
    * f1 -> PrintStatment()
    * f2 -> <EOF>
    */
   public Integer visit(Goal n) {
      n.f0.accept(this);
      n.f1.accept(this);
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Integer visit(AssignmentStatement n) {
      int val = n.f2.accept(this);
      String id = n.f0.f0.tokenImage;
      valMap.put(id, val);
      return null;
   }

   /**
    * f0 -> <PRINT>
    * f1 -> Expression()
    * f2 -> ";"
    */
   public Integer visit(PrintStatment n) {
      int printVal = n.f1.accept(this);
      System.out.println("the valuse is: " + printVal);
      return null;
   }

   /**
    * f0 -> PlusExpression()
    * | MinusExpression()
    * | TimesExperssion()
    * | PrimaryExpression()
    */
   public Integer visit(Expression n) {
      int _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <PLUS>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(PlusExpression n) {
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      int _ret = val1 + val2;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <TIMES>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(TimesExpression n) {
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      int _ret = val1 * val2;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <TIMES>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(DivExpression n) {
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      int _ret = val1 / val2;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <MINUS>
    * f2 -> PrimaryExpression()
    */
   public Integer visit(MinusExpression n) {
      int val1 = n.f0.accept(this);
      int val2 = n.f2.accept(this);
      int _ret = val1 - val2;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | Identifier()
    * | BracketExpression()
    */
   public Integer visit(PrimaryExpression n) {
      int _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Integer visit(IntegerLiteral n) {
      int _ret = Integer.parseInt(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Integer visit(Identifier n) {
      int _ret = valMap.get(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> Expression()
    * f2 -> <RPAREN>
    */
   public Integer visit(BracketExpression n) {
      int _ret = n.f1.accept(this);
      return _ret;
   }

}
