//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if (n.present()) {
         R _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public R visit(NodeOptional n) {
      if (n.present())
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) {
      return null;
   }

   //
   // User-generated visitor methods below
   //
   private final Map<String, Integer> variableMap = new HashMap<>();

   /**
    * f0 -> ( AssignmentStatement() )*
    * f1 -> PrintStatment()
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      // R _ret=null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // n.f3.accept(this);
      // return _ret;
      String identifier = n.f0.f0.tokenImage;
      int value = (int) n.f2.accept(this); // Evaluate the expression
      variableMap.put(identifier, value); // Store in the map
      return null;

   }

   /**
    * f0 -> <PRINT>
    * f1 -> Expression()
    * f2 -> ";"
    */
   public R visit(PrintStatment n) {
      // R _ret = null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // return _ret;
      int value = (int) n.f1.accept(this); // Evaluate the expression
      System.out.println(value); // Print the result
      return null;

   }

   /**
    * f0 -> PlusExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | PrimaryExpression()
    */
   public R visit(Expression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // return _ret;
      return n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <PLUS>
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // return _ret;
      int left = (int) n.f0.accept(this);
      int right = (int) n.f2.accept(this);
      return (R) Integer.valueOf(left + right);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <MINUS>
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // return _ret;
      int left = (int) n.f0.accept(this);
      int right = (int) n.f2.accept(this);
      return (R) Integer.valueOf(left - right);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <TIMES>
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // return _ret;
      int left = (int) n.f0.accept(this);
      int right = (int) n.f2.accept(this);
      return (R) Integer.valueOf(left * right);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> <DIV>
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // return _ret;
      int left = (int) n.f0.accept(this);
      int right = (int) n.f2.accept(this);
      return (R) Integer.valueOf(left / right);
   }

   /**
    * f0 -> IntegerLiteral()
    * | Identifier()
    * | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // return _ret;
      return n.f0.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      // R _ret = null;
      // n.f0.accept(this);
      // return _ret;
      return (R) Integer.valueOf(Integer.parseInt(n.f0.tokenImage));
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      // R _ret = null;
      // n.f0.accept(this);
      // return _ret;
      String name = n.f0.tokenImage;
      if (variableMap.containsKey(name)) {
         return (R) Integer.valueOf(variableMap.get(name)); // Retrieve variable value
      } else {
         throw new RuntimeException("Variable " + name + " is not defined.");
      }
   }

   /**
    * f0 -> <LPAREN>
    * f1 -> Expression()
    * f2 -> <RPAREN>
    */
   public R visit(BracketExpression n) {
      // R _ret = null;
      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // return _ret;
      return n.f1.accept(this);
   }

}
