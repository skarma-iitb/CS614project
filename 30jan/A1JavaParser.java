
/* A1JavaParser.java */
/* Generated By:JavaCC: Do not edit this line. A1JavaParser.java */
import syntaxtree.*;
import java.util.Vector;

public class A1JavaParser implements A1JavaParserConstants {

  static final public Goal Goal() throws ParseException {
    MainClass n0;
    NodeListOptional n1 = new NodeListOptional();
    TypeDeclaration n2;
    NodeToken n3;
    Token n4;
    n0 = MainClass();
    label_1: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLASS: {
          ;
          break;
        }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
      }
      n2 = TypeDeclaration();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    n4 = jj_consume_token(0);
    n4.beginColumn++;
    n4.endColumn++;
    n3 = JTBToolkit.makeNodeToken(n4);
    {
      if ("" != null)
        return new Goal(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
    NodeToken n0;
    Token n1;
    NodeToken n2;
    Token n3;
    Identifier n4;
    NodeToken n5;
    Token n6;
    NodeToken n7;
    Token n8;
    NodeToken n9;
    Token n10;
    NodeToken n11;
    Token n12;
    NodeToken n13;
    Token n14;
    NodeToken n15;
    Token n16;
    NodeToken n17;
    Token n18;
    NodeToken n19;
    Token n20;
    NodeToken n21;
    Token n22;
    Identifier n23;
    NodeToken n24;
    Token n25;
    NodeToken n26;
    Token n27;
    NodeListOptional n28 = new NodeListOptional();
    VarDeclaration n29;
    NodeListOptional n30 = new NodeListOptional();
    Statement n31;
    NodeToken n32;
    Token n33;
    NodeToken n34;
    Token n35;
    n1 = jj_consume_token(PUBLIC);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(CLASS);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(PUBLIC);
    n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(STATIC);
    n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(VOID);
    n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(MAIN);
    n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(LPAREN);
    n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(STRING);
    n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(LSQPAREN);
    n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RSQPAREN);
    n21 = JTBToolkit.makeNodeToken(n22);
    n23 = Identifier();
    n25 = jj_consume_token(RPAREN);
    n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(LBRACE);
    n26 = JTBToolkit.makeNodeToken(n27);
    label_2: while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_2;
      }
      n29 = VarDeclaration();
      n28.addNode(n29);
    }
    n28.nodes.trimToSize();
    label_3: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case RETURN:
        case THIS:
        case PRINT:
        case IDENTIFIER: {
          ;
          break;
        }
        default:
          jj_la1[1] = jj_gen;
          break label_3;
      }
      n31 = Statement();
      n30.addNode(n31);
    }
    n30.nodes.trimToSize();
    n33 = jj_consume_token(RBRACE);
    n32 = JTBToolkit.makeNodeToken(n33);
    n35 = jj_consume_token(RBRACE);
    n34 = JTBToolkit.makeNodeToken(n35);
    {
      if ("" != null)
        return new MainClass(n0, n2, n4, n5, n7, n9, n11, n13, n15, n17, n19, n21, n23, n24, n26, n28, n30, n32, n34);
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeDeclaration TypeDeclaration() throws ParseException {
    NodeChoice n0;
    ClassDeclaration n1;
    ClassExtendsDeclaration n2;
    if (jj_2_2(3)) {
      n1 = ClassDeclaration();
      n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case CLASS: {
          n2 = ClassExtendsDeclaration();
          n0 = new NodeChoice(n2, 1);
          break;
        }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
    {
      if ("" != null)
        return new TypeDeclaration(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
    NodeToken n0;
    Token n1;
    Identifier n2;
    NodeToken n3;
    Token n4;
    NodeListOptional n5 = new NodeListOptional();
    VarDeclaration n6;
    NodeListOptional n7 = new NodeListOptional();
    MethodDeclaration n8;
    NodeToken n9;
    Token n10;
    n1 = jj_consume_token(CLASS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
    n3 = JTBToolkit.makeNodeToken(n4);
    label_4: while (true) {
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_4;
      }
      n6 = VarDeclaration();
      n5.addNode(n6);
    }
    n5.nodes.trimToSize();
    label_5: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PUBLIC: {
          ;
          break;
        }
        default:
          jj_la1[3] = jj_gen;
          break label_5;
      }
      n8 = MethodDeclaration();
      n7.addNode(n8);
    }
    n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
    n9 = JTBToolkit.makeNodeToken(n10);
    {
      if ("" != null)
        return new ClassDeclaration(n0, n2, n3, n5, n7, n9);
    }
    throw new Error("Missing return statement in function");
  }

  static final public ClassExtendsDeclaration ClassExtendsDeclaration() throws ParseException {
    NodeToken n0;
    Token n1;
    Identifier n2;
    NodeToken n3;
    Token n4;
    Identifier n5;
    NodeToken n6;
    Token n7;
    NodeListOptional n8 = new NodeListOptional();
    VarDeclaration n9;
    NodeListOptional n10 = new NodeListOptional();
    MethodDeclaration n11;
    NodeToken n12;
    Token n13;
    n1 = jj_consume_token(CLASS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(EXTENDS);
    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(LBRACE);
    n6 = JTBToolkit.makeNodeToken(n7);
    label_6: while (true) {
      if (jj_2_4(2147483647)) {
        ;
      } else {
        break label_6;
      }
      n9 = VarDeclaration();
      n8.addNode(n9);
    }
    n8.nodes.trimToSize();
    label_7: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PUBLIC: {
          ;
          break;
        }
        default:
          jj_la1[4] = jj_gen;
          break label_7;
      }
      n11 = MethodDeclaration();
      n10.addNode(n11);
    }
    n10.nodes.trimToSize();
    n13 = jj_consume_token(RBRACE);
    n12 = JTBToolkit.makeNodeToken(n13);
    {
      if ("" != null)
        return new ClassExtendsDeclaration(n0, n2, n3, n5, n6, n8, n10, n12);
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclaration VarDeclaration() throws ParseException {
    Type n0;
    Identifier n1;
    NodeToken n2;
    Token n3;
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(SEMICOLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    {
      if ("" != null)
        return new VarDeclaration(n0, n1, n2);
    }
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
    NodeToken n0;
    Token n1;
    Type n2;
    Identifier n3;
    NodeToken n4;
    Token n5;
    NodeOptional n6 = new NodeOptional();
    FormalParameterList n7;
    NodeToken n8;
    Token n9;
    NodeToken n10;
    Token n11;
    NodeListOptional n12 = new NodeListOptional();
    VarDeclaration n13;
    NodeListOptional n14 = new NodeListOptional();
    Statement n15;
    NodeToken n16;
    Token n17;
    n1 = jj_consume_token(PUBLIC);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case VOID:
      case IDENTIFIER: {
        n7 = FormalParameterList();
        n6.addNode(n7);
        break;
      }
      default:
        jj_la1[5] = jj_gen;
        ;
    }
    n9 = jj_consume_token(RPAREN);
    n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LBRACE);
    n10 = JTBToolkit.makeNodeToken(n11);
    label_8: while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_8;
      }
      n13 = VarDeclaration();
      n12.addNode(n13);
    }
    n12.nodes.trimToSize();
    label_9: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case RETURN:
        case THIS:
        case PRINT:
        case IDENTIFIER: {
          ;
          break;
        }
        default:
          jj_la1[6] = jj_gen;
          break label_9;
      }
      n15 = Statement();
      n14.addNode(n15);
    }
    n14.nodes.trimToSize();
    n17 = jj_consume_token(RBRACE);
    n16 = JTBToolkit.makeNodeToken(n17);
    {
      if ("" != null)
        return new MethodDeclaration(n0, n2, n3, n4, n6, n8, n10, n12, n14, n16);
    }
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterList FormalParameterList() throws ParseException {
    FormalParameter n0;
    NodeListOptional n1 = new NodeListOptional();
    FormalParameterRest n2;
    n0 = FormalParameter();
    label_10: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case 51: {
          ;
          break;
        }
        default:
          jj_la1[7] = jj_gen;
          break label_10;
      }
      n2 = FormalParameterRest();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {
      if ("" != null)
        return new FormalParameterList(n0, n1);
    }
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameter FormalParameter() throws ParseException {
    Type n0;
    Identifier n1;
    n0 = Type();
    n1 = Identifier();
    {
      if ("" != null)
        return new FormalParameter(n0, n1);
    }
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterRest FormalParameterRest() throws ParseException {
    NodeToken n0;
    Token n1;
    FormalParameter n2;
    n1 = jj_consume_token(51);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameter();
    {
      if ("" != null)
        return new FormalParameterRest(n0, n2);
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
    NodeChoice n0;
    BooleanType n1;
    IntegerType n2;
    VoidType n3;
    Identifier n4;
    if (jj_2_6(3)) {
      n1 = BooleanType();
      n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGER: {
          n2 = IntegerType();
          n0 = new NodeChoice(n2, 1);
          break;
        }
        case VOID: {
          n3 = VoidType();
          n0 = new NodeChoice(n3, 2);
          break;
        }
        case IDENTIFIER: {
          n4 = Identifier();
          n0 = new NodeChoice(n4, 3);
          break;
        }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
    {
      if ("" != null)
        return new Type(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(BOOLEAN);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new BooleanType(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(INTEGER);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new IntegerType(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public VoidType VoidType() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(VOID);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new VoidType(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
    NodeChoice n0;
    Block n1;
    ReturnStatement n2;
    AssignmentStatement n3;
    MessageSendStatement n4;
    FieldStoreStatement n5;
    IfStatement n6;
    WhileStatement n7;
    PrintStatement n8;
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case LBRACE: {
        n1 = Block();
        n0 = new NodeChoice(n1, 0);
        break;
      }
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_7(2147483647)) {
          n2 = ReturnStatement();
          n0 = new NodeChoice(n2, 1);
        } else if (jj_2_8(2147483647)) {
          n3 = AssignmentStatement();
          n0 = new NodeChoice(n3, 2);
        } else if (jj_2_9(2147483647)) {
          n4 = MessageSendStatement();
          n0 = new NodeChoice(n4, 3);
        } else if (jj_2_10(2)) {
          n5 = FieldStoreStatement();
          n0 = new NodeChoice(n5, 4);
        } else {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IF: {
              n6 = IfStatement();
              n0 = new NodeChoice(n6, 5);
              break;
            }
            case WHILE: {
              n7 = WhileStatement();
              n0 = new NodeChoice(n7, 6);
              break;
            }
            case PRINT: {
              n8 = PrintStatement();
              n0 = new NodeChoice(n8, 7);
              break;
            }
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
    }
    {
      if ("" != null)
        return new Statement(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
    NodeToken n0;
    Token n1;
    NodeListOptional n2 = new NodeListOptional();
    Statement n3;
    NodeToken n4;
    Token n5;
    n1 = jj_consume_token(LBRACE);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_11: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case RETURN:
        case THIS:
        case PRINT:
        case IDENTIFIER: {
          ;
          break;
        }
        default:
          jj_la1[11] = jj_gen;
          break label_11;
      }
      n3 = Statement();
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
    n4 = JTBToolkit.makeNodeToken(n5);
    {
      if ("" != null)
        return new Block(n0, n2, n4);
    }
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatement ReturnStatement() throws ParseException {
    NodeToken n0;
    Token n1;
    Expression n2;
    NodeToken n3;
    Token n4;
    n1 = jj_consume_token(RETURN);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {
      if ("" != null)
        return new ReturnStatement(n0, n2, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatement AssignmentStatement() throws ParseException {
    Identifier n0;
    NodeToken n1;
    Token n2;
    Expression n3;
    NodeToken n4;
    Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
    n4 = JTBToolkit.makeNodeToken(n5);
    {
      if ("" != null)
        return new AssignmentStatement(n0, n1, n3, n4);
    }
    throw new Error("Missing return statement in function");
  }

  static final public FieldStoreStatement FieldStoreStatement() throws ParseException {
    BaseExpression n0;
    NodeToken n1;
    Token n2;
    Identifier n3;
    NodeToken n4;
    Token n5;
    Expression n6;
    NodeToken n7;
    Token n8;
    n0 = BaseExpression();
    n2 = jj_consume_token(DOT);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(ASSIGN);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(SEMICOLON);
    n7 = JTBToolkit.makeNodeToken(n8);
    {
      if ("" != null)
        return new FieldStoreStatement(n0, n1, n3, n4, n6, n7);
    }
    throw new Error("Missing return statement in function");
  }

  static final public MessageSendStatement MessageSendStatement() throws ParseException {
    BaseExpression n0;
    NodeToken n1;
    Token n2;
    Identifier n3;
    NodeToken n4;
    Token n5;
    NodeOptional n6 = new NodeOptional();
    ExpressionList n7;
    NodeToken n8;
    Token n9;
    NodeToken n10;
    Token n11;
    n0 = BaseExpression();
    n2 = jj_consume_token(DOT);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case LPAREN:
      case NOT:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER: {
        n7 = ExpressionList();
        n6.addNode(n7);
        break;
      }
      default:
        jj_la1[12] = jj_gen;
        ;
    }
    n9 = jj_consume_token(RPAREN);
    n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
    n10 = JTBToolkit.makeNodeToken(n11);
    {
      if ("" != null)
        return new MessageSendStatement(n0, n1, n3, n4, n6, n8, n10);
    }
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
    NodeChoice n0;
    IfthenElseStatement n1;
    IfthenStatement n2;
    if (jj_2_11(2147483647)) {
      n1 = IfthenElseStatement();
      n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case IF: {
          n2 = IfthenStatement();
          n0 = new NodeChoice(n2, 1);
          break;
        }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
    {
      if ("" != null)
        return new IfStatement(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public IfthenStatement IfthenStatement() throws ParseException {
    NodeToken n0;
    Token n1;
    NodeToken n2;
    Token n3;
    Identifier n4;
    NodeToken n5;
    Token n6;
    Statement n7;
    n1 = jj_consume_token(IF);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    {
      if ("" != null)
        return new IfthenStatement(n0, n2, n4, n5, n7);
    }
    throw new Error("Missing return statement in function");
  }

  static final public IfthenElseStatement IfthenElseStatement() throws ParseException {
    NodeToken n0;
    Token n1;
    NodeToken n2;
    Token n3;
    Identifier n4;
    NodeToken n5;
    Token n6;
    Statement n7;
    NodeToken n8;
    Token n9;
    Statement n10;
    n1 = jj_consume_token(IF);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    n9 = jj_consume_token(ELSE);
    n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
    {
      if ("" != null)
        return new IfthenElseStatement(n0, n2, n4, n5, n7, n8, n10);
    }
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
    NodeToken n0;
    Token n1;
    NodeToken n2;
    Token n3;
    Identifier n4;
    NodeToken n5;
    Token n6;
    Statement n7;
    n1 = jj_consume_token(WHILE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    {
      if ("" != null)
        return new WhileStatement(n0, n2, n4, n5, n7);
    }
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatement() throws ParseException {
    NodeToken n0;
    Token n1;
    NodeToken n2;
    Token n3;
    Expression n4;
    NodeToken n5;
    Token n6;
    NodeToken n7;
    Token n8;
    n1 = jj_consume_token(PRINT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
    n7 = JTBToolkit.makeNodeToken(n8);
    {
      if ("" != null)
        return new PrintStatement(n0, n2, n4, n5, n7);
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
    NodeChoice n0;
    OrExpression n1;
    AndExpression n2;
    CompareExpression n3;
    NeqExpression n4;
    PlusExpression n5;
    MinusExpression n6;
    TimesExpression n7;
    DivExpression n8;
    MessageSend n9;
    FieldLookup n10;
    PrimaryExpression n11;
    if (jj_2_12(2147483647)) {
      n1 = OrExpression();
      n0 = new NodeChoice(n1, 0);
    } else if (jj_2_13(2147483647)) {
      n2 = AndExpression();
      n0 = new NodeChoice(n2, 1);
    } else if (jj_2_14(2147483647)) {
      n3 = CompareExpression();
      n0 = new NodeChoice(n3, 2);
    } else if (jj_2_15(2147483647)) {
      n4 = NeqExpression();
      n0 = new NodeChoice(n4, 3);
    } else if (jj_2_16(2147483647)) {
      n5 = PlusExpression();
      n0 = new NodeChoice(n5, 4);
    } else if (jj_2_17(2147483647)) {
      n6 = MinusExpression();
      n0 = new NodeChoice(n6, 5);
    } else if (jj_2_18(2147483647)) {
      n7 = TimesExpression();
      n0 = new NodeChoice(n7, 6);
    } else if (jj_2_19(2147483647)) {
      n8 = DivExpression();
      n0 = new NodeChoice(n8, 7);
    } else if (jj_2_20(2147483647)) {
      n9 = MessageSend();
      n0 = new NodeChoice(n9, 8);
    } else if (jj_2_21(2147483647)) {
      n10 = FieldLookup();
      n0 = new NodeChoice(n10, 9);
    } else {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LPAREN:
        case NOT:
        case FALSE:
        case NEW:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case IDENTIFIER: {
          n11 = PrimaryExpression();
          n0 = new NodeChoice(n11, 10);
          break;
        }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
    {
      if ("" != null)
        return new Expression(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public AndExpression AndExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(AND);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new AndExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public OrExpression OrExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(OR);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new OrExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public CompareExpression CompareExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(LE);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new CompareExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public NeqExpression NeqExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(NE);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new NeqExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(PLUS);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new PlusExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MINUS);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new MinusExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MULT);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new TimesExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public DivExpression DivExpression() throws ParseException {
    PrimaryExpression n0;
    NodeToken n1;
    Token n2;
    PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DIV);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    {
      if ("" != null)
        return new DivExpression(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public FieldLookup FieldLookup() throws ParseException {
    Identifier n0;
    NodeToken n1;
    Token n2;
    Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    {
      if ("" != null)
        return new FieldLookup(n0, n1, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static final public MessageSend MessageSend() throws ParseException {
    BaseExpression n0;
    NodeToken n1;
    Token n2;
    Identifier n3;
    NodeToken n4;
    Token n5;
    NodeOptional n6 = new NodeOptional();
    ExpressionList n7;
    NodeToken n8;
    Token n9;
    n0 = BaseExpression();
    n2 = jj_consume_token(DOT);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case LPAREN:
      case NOT:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER: {
        n7 = ExpressionList();
        n6.addNode(n7);
        break;
      }
      default:
        jj_la1[15] = jj_gen;
        ;
    }
    n9 = jj_consume_token(RPAREN);
    n8 = JTBToolkit.makeNodeToken(n9);
    {
      if ("" != null)
        return new MessageSend(n0, n1, n3, n4, n6, n8);
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionList ExpressionList() throws ParseException {
    Expression n0;
    NodeListOptional n1 = new NodeListOptional();
    ExpressionRest n2;
    n0 = Expression();
    label_12: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case 51: {
          ;
          break;
        }
        default:
          jj_la1[16] = jj_gen;
          break label_12;
      }
      n2 = ExpressionRest();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {
      if ("" != null)
        return new ExpressionList(n0, n1);
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionRest ExpressionRest() throws ParseException {
    NodeToken n0;
    Token n1;
    Expression n2;
    n1 = jj_consume_token(51);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    {
      if ("" != null)
        return new ExpressionRest(n0, n2);
    }
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
    NodeChoice n0;
    TrueLiteral n1;
    FalseLiteral n2;
    IntegerLiteral n3;
    Identifier n4;
    ThisExpression n5;
    AllocationExpression n6;
    NotExpression n7;
    BracketExpression n8;
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case TRUE: {
        n1 = TrueLiteral();
        n0 = new NodeChoice(n1, 0);
        break;
      }
      case FALSE: {
        n2 = FalseLiteral();
        n0 = new NodeChoice(n2, 1);
        break;
      }
      case INTEGER_LITERAL: {
        n3 = IntegerLiteral();
        n0 = new NodeChoice(n3, 2);
        break;
      }
      case IDENTIFIER: {
        n4 = Identifier();
        n0 = new NodeChoice(n4, 3);
        break;
      }
      case THIS: {
        n5 = ThisExpression();
        n0 = new NodeChoice(n5, 4);
        break;
      }
      case NEW: {
        n6 = AllocationExpression();
        n0 = new NodeChoice(n6, 5);
        break;
      }
      case NOT: {
        n7 = NotExpression();
        n0 = new NodeChoice(n7, 6);
        break;
      }
      case LPAREN: {
        n8 = BracketExpression();
        n0 = new NodeChoice(n8, 7);
        break;
      }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if ("" != null)
        return new PrimaryExpression(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public BaseExpression BaseExpression() throws ParseException {
    NodeChoice n0;
    Identifier n1;
    ThisExpression n2;
    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case IDENTIFIER: {
        n1 = Identifier();
        n0 = new NodeChoice(n1, 0);
        break;
      }
      case THIS: {
        n2 = ThisExpression();
        n0 = new NodeChoice(n2, 1);
        break;
      }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if ("" != null)
        return new BaseExpression(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new IntegerLiteral(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public TrueLiteral TrueLiteral() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(TRUE);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new TrueLiteral(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public FalseLiteral FalseLiteral() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(FALSE);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new FalseLiteral(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new Identifier(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public ThisExpression ThisExpression() throws ParseException {
    NodeToken n0;
    Token n1;
    n1 = jj_consume_token(THIS);
    n0 = JTBToolkit.makeNodeToken(n1);
    {
      if ("" != null)
        return new ThisExpression(n0);
    }
    throw new Error("Missing return statement in function");
  }

  static final public AllocationExpression AllocationExpression() throws ParseException {
    NodeToken n0;
    Token n1;
    Identifier n2;
    NodeToken n3;
    Token n4;
    NodeToken n5;
    Token n6;
    n1 = jj_consume_token(NEW);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
    n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {
      if ("" != null)
        return new AllocationExpression(n0, n2, n3, n5);
    }
    throw new Error("Missing return statement in function");
  }

  static final public NotExpression NotExpression() throws ParseException {
    NodeToken n0;
    Token n1;
    Expression n2;
    n1 = jj_consume_token(NOT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    {
      if ("" != null)
        return new NotExpression(n0, n2);
    }
    throw new Error("Missing return statement in function");
  }

  static final public BracketExpression BracketExpression() throws ParseException {
    NodeToken n0;
    Token n1;
    Expression n2;
    NodeToken n3;
    Token n4;
    n1 = jj_consume_token(LPAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(RPAREN);
    n3 = JTBToolkit.makeNodeToken(n4);
    {
      if ("" != null)
        return new BracketExpression(n0, n2, n3);
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_1());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(0, xla);
    }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_2());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(1, xla);
    }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_3());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(2, xla);
    }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_4());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(3, xla);
    }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_5());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(4, xla);
    }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_6());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(5, xla);
    }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_7());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(6, xla);
    }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_8());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(7, xla);
    }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_9());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(8, xla);
    }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_10());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(9, xla);
    }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_11());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(10, xla);
    }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_12());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(11, xla);
    }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_13());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(12, xla);
    }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_14());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(13, xla);
    }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_15());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(14, xla);
    }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_16());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(15, xla);
    }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_17());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(16, xla);
    }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_18());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(17, xla);
    }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_19());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(18, xla);
    }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_20());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(19, xla);
    }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_21());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(20, xla);
    }
  }

  static private boolean jj_3R_PrintStatement_753_4_83() {
    if (jj_scan_token(PRINT))
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    if (jj_scan_token(RPAREN))
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_ReturnStatement_559_4_16() {
    if (jj_scan_token(RETURN))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_TimesExpression_940_4_75() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(MULT))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3R_TrueLiteral_1129_4_60() {
    if (jj_scan_token(TRUE))
      return true;
    return false;
  }

  static private boolean jj_3R_IntegerLiteral_1116_4_62() {
    if (jj_scan_token(INTEGER_LITERAL))
      return true;
    return false;
  }

  static private boolean jj_3R_Block_539_7_86() {
    if (jj_3R_Statement_492_4_27())
      return true;
    return false;
  }

  static private boolean jj_3R_MinusExpression_923_4_74() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(MINUS))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_VarDeclaration_304_4_13())
      return true;
    return false;
  }

  static private boolean jj_3R_WhileStatement_729_4_82() {
    if (jj_scan_token(WHILE))
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(RPAREN))
      return true;
    if (jj_3R_Statement_492_4_27())
      return true;
    return false;
  }

  static private boolean jj_3R_Block_537_4_80() {
    if (jj_scan_token(LBRACE))
      return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Block_539_7_86()) {
        jj_scanpos = xsp;
        break;
      }
    }
    if (jj_scan_token(RBRACE))
      return true;
    return false;
  }

  static private boolean jj_3R_BaseExpression_1101_7_37() {
    if (jj_3R_ThisExpression_1168_4_63())
      return true;
    return false;
  }

  static private boolean jj_3R_BaseExpression_1098_7_36() {
    if (jj_3R_Identifier_1155_4_23())
      return true;
    return false;
  }

  static private boolean jj_3R_PlusExpression_906_4_73() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(PLUS))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3R_BaseExpression_1097_4_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BaseExpression_1098_7_36()) {
      jj_scanpos = xsp;
      if (jj_3R_BaseExpression_1101_7_37())
        return true;
    }
    return false;
  }

  static private boolean jj_3R_Statement_518_7_59() {
    if (jj_3R_PrintStatement_753_4_83())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_515_7_58() {
    if (jj_3R_WhileStatement_729_4_82())
      return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_MessageSendStatement_629_4_18())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_512_7_57() {
    if (jj_3R_IfStatement_652_4_81())
      return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_AssignmentStatement_578_4_17())
      return true;
    return false;
  }

  static private boolean jj_3R_IfthenElseStatement_704_4_20() {
    if (jj_scan_token(IF))
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(RPAREN))
      return true;
    if (jj_3R_Statement_492_4_27())
      return true;
    if (jj_scan_token(ELSE))
      return true;
    if (jj_3R_Statement_492_4_27())
      return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_FieldStoreStatement_601_4_19())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1081_7_35() {
    if (jj_3R_BracketExpression_1220_4_66())
      return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_ReturnStatement_559_4_16())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1078_7_34() {
    if (jj_3R_NotExpression_1203_4_65())
      return true;
    return false;
  }

  static private boolean jj_3R_NeqExpression_889_4_72() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(NE))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_504_7_56() {
    if (jj_3R_MessageSendStatement_629_4_18())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1075_7_33() {
    if (jj_3R_AllocationExpression_1186_4_64())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_500_7_55() {
    if (jj_3R_AssignmentStatement_578_4_17())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1072_7_32() {
    if (jj_3R_ThisExpression_1168_4_63())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_496_7_54() {
    if (jj_3R_ReturnStatement_559_4_16())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1069_7_31() {
    if (jj_3R_Identifier_1155_4_23())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_493_7_53() {
    if (jj_3R_Block_537_4_80())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1066_7_30() {
    if (jj_3R_IntegerLiteral_1116_4_62())
      return true;
    return false;
  }

  static private boolean jj_3R_VarDeclaration_304_4_13() {
    if (jj_3R_Type_420_4_24())
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1063_7_29() {
    if (jj_3R_FalseLiteral_1142_4_61())
      return true;
    return false;
  }

  static private boolean jj_3R_Statement_492_4_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_493_7_53()) {
      jj_scanpos = xsp;
      if (jj_3R_Statement_496_7_54()) {
        jj_scanpos = xsp;
        if (jj_3R_Statement_500_7_55()) {
          jj_scanpos = xsp;
          if (jj_3R_Statement_504_7_56()) {
            jj_scanpos = xsp;
            if (jj_3_10()) {
              jj_scanpos = xsp;
              if (jj_3R_Statement_512_7_57()) {
                jj_scanpos = xsp;
                if (jj_3R_Statement_515_7_58()) {
                  jj_scanpos = xsp;
                  if (jj_3R_Statement_518_7_59())
                    return true;
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  static private boolean jj_3R_CompareExpression_872_4_71() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(LE))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1060_7_28() {
    if (jj_3R_TrueLiteral_1129_4_60())
      return true;
    return false;
  }

  static private boolean jj_3R_IfthenStatement_678_4_89() {
    if (jj_scan_token(IF))
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(RPAREN))
      return true;
    if (jj_3R_Statement_492_4_27())
      return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_1059_4_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryExpression_1060_7_28()) {
      jj_scanpos = xsp;
      if (jj_3R_PrimaryExpression_1063_7_29()) {
        jj_scanpos = xsp;
        if (jj_3R_PrimaryExpression_1066_7_30()) {
          jj_scanpos = xsp;
          if (jj_3R_PrimaryExpression_1069_7_31()) {
            jj_scanpos = xsp;
            if (jj_3R_PrimaryExpression_1072_7_32()) {
              jj_scanpos = xsp;
              if (jj_3R_PrimaryExpression_1075_7_33()) {
                jj_scanpos = xsp;
                if (jj_3R_PrimaryExpression_1078_7_34()) {
                  jj_scanpos = xsp;
                  if (jj_3R_PrimaryExpression_1081_7_35())
                    return true;
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_VarDeclaration_304_4_13())
      return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_IfthenElseStatement_704_4_20())
      return true;
    return false;
  }

  static private boolean jj_3R_OrExpression_855_4_69() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(OR))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3R_VoidType_472_4_68() {
    if (jj_scan_token(VOID))
      return true;
    return false;
  }

  static private boolean jj_3R_IfStatement_657_7_88() {
    if (jj_3R_IfthenStatement_678_4_89())
      return true;
    return false;
  }

  static private boolean jj_3R_IfStatement_653_7_87() {
    if (jj_3R_IfthenElseStatement_704_4_20())
      return true;
    return false;
  }

  static private boolean jj_3R_ExpressionRest_1038_4_85() {
    if (jj_scan_token(51))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    return false;
  }

  static private boolean jj_3R_IfStatement_652_4_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IfStatement_653_7_87()) {
      jj_scanpos = xsp;
      if (jj_3R_IfStatement_657_7_88())
        return true;
    }
    return false;
  }

  static private boolean jj_3R_IntegerType_459_4_67() {
    if (jj_scan_token(INTEGER))
      return true;
    return false;
  }

  static private boolean jj_3R_AndExpression_838_4_70() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(AND))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3R_BracketExpression_1220_4_66() {
    if (jj_scan_token(LPAREN))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    if (jj_scan_token(RPAREN))
      return true;
    return false;
  }

  static private boolean jj_3R_ExpressionList_1021_7_79() {
    if (jj_3R_ExpressionRest_1038_4_85())
      return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(DOT))
      return true;
    return false;
  }

  static private boolean jj_3R_BooleanType_446_4_15() {
    if (jj_scan_token(BOOLEAN))
      return true;
    return false;
  }

  static private boolean jj_3R_MessageSendStatement_634_7_26() {
    if (jj_3R_ExpressionList_1019_4_52())
      return true;
    return false;
  }

  static private boolean jj_3R_ExpressionList_1019_4_52() {
    if (jj_3R_Expression_780_4_25())
      return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionList_1021_7_79()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_BaseExpression_1097_4_22())
      return true;
    if (jj_scan_token(DOT))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_VarDeclaration_304_4_13())
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_821_7_51() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(DIV))
      return true;
    return false;
  }

  static private boolean jj_3R_NotExpression_1203_4_65() {
    if (jj_scan_token(NOT))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    return false;
  }

  static private boolean jj_3R_MessageSendStatement_629_4_18() {
    if (jj_3R_BaseExpression_1097_4_22())
      return true;
    if (jj_scan_token(DOT))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageSendStatement_634_7_26())
      jj_scanpos = xsp;
    if (jj_scan_token(RPAREN))
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_817_7_50() {
    if (jj_3R_FieldLookup_974_4_78())
      return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(MULT))
      return true;
    return false;
  }

  static private boolean jj_3R_Type_431_7_40() {
    if (jj_3R_Identifier_1155_4_23())
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_813_7_49() {
    if (jj_3R_MessageSend_997_4_77())
      return true;
    return false;
  }

  static private boolean jj_3R_MessageSend_1002_7_84() {
    if (jj_3R_ExpressionList_1019_4_52())
      return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(MINUS))
      return true;
    return false;
  }

  static private boolean jj_3R_Type_428_7_39() {
    if (jj_3R_VoidType_472_4_68())
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_809_7_48() {
    if (jj_3R_DivExpression_957_4_76())
      return true;
    return false;
  }

  static private boolean jj_3R_Type_425_7_38() {
    if (jj_3R_IntegerType_459_4_67())
      return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(PLUS))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_805_7_47() {
    if (jj_3R_TimesExpression_940_4_75())
      return true;
    return false;
  }

  static private boolean jj_3R_ClassDeclaration_234_4_14() {
    if (jj_scan_token(CLASS))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(LBRACE))
      return true;
    return false;
  }

  static private boolean jj_3R_MessageSend_997_4_77() {
    if (jj_3R_BaseExpression_1097_4_22())
      return true;
    if (jj_scan_token(DOT))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MessageSend_1002_7_84())
      jj_scanpos = xsp;
    if (jj_scan_token(RPAREN))
      return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_BooleanType_446_4_15())
      return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(NE))
      return true;
    return false;
  }

  static private boolean jj_3R_AllocationExpression_1186_4_64() {
    if (jj_scan_token(NEW))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(LPAREN))
      return true;
    if (jj_scan_token(RPAREN))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_801_7_46() {
    if (jj_3R_MinusExpression_923_4_74())
      return true;
    return false;
  }

  static private boolean jj_3R_Type_420_4_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
      jj_scanpos = xsp;
      if (jj_3R_Type_425_7_38()) {
        jj_scanpos = xsp;
        if (jj_3R_Type_428_7_39()) {
          jj_scanpos = xsp;
          if (jj_3R_Type_431_7_40())
            return true;
        }
      }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(LE))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_797_7_45() {
    if (jj_3R_PlusExpression_906_4_73())
      return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(AND))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_793_7_44() {
    if (jj_3R_NeqExpression_889_4_72())
      return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(OR))
      return true;
    return false;
  }

  static private boolean jj_3R_FieldStoreStatement_601_4_19() {
    if (jj_3R_BaseExpression_1097_4_22())
      return true;
    if (jj_scan_token(DOT))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(ASSIGN))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_789_7_43() {
    if (jj_3R_CompareExpression_872_4_71())
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_785_7_42() {
    if (jj_3R_AndExpression_838_4_70())
      return true;
    return false;
  }

  static private boolean jj_3R_ThisExpression_1168_4_63() {
    if (jj_scan_token(THIS))
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_781_7_41() {
    if (jj_3R_OrExpression_855_4_69())
      return true;
    return false;
  }

  static private boolean jj_3R_FieldLookup_974_4_78() {
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(DOT))
      return true;
    if (jj_3R_Identifier_1155_4_23())
      return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_ClassDeclaration_234_4_14())
      return true;
    return false;
  }

  static private boolean jj_3R_Expression_780_4_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Expression_781_7_41()) {
      jj_scanpos = xsp;
      if (jj_3R_Expression_785_7_42()) {
        jj_scanpos = xsp;
        if (jj_3R_Expression_789_7_43()) {
          jj_scanpos = xsp;
          if (jj_3R_Expression_793_7_44()) {
            jj_scanpos = xsp;
            if (jj_3R_Expression_797_7_45()) {
              jj_scanpos = xsp;
              if (jj_3R_Expression_801_7_46()) {
                jj_scanpos = xsp;
                if (jj_3R_Expression_805_7_47()) {
                  jj_scanpos = xsp;
                  if (jj_3R_Expression_809_7_48()) {
                    jj_scanpos = xsp;
                    if (jj_3R_Expression_813_7_49()) {
                      jj_scanpos = xsp;
                      if (jj_3R_Expression_817_7_50()) {
                        jj_scanpos = xsp;
                        if (jj_3R_Expression_821_7_51())
                          return true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }

  static private boolean jj_3R_Identifier_1155_4_23() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3R_AssignmentStatement_578_4_17() {
    if (jj_3R_Identifier_1155_4_23())
      return true;
    if (jj_scan_token(ASSIGN))
      return true;
    if (jj_3R_Expression_780_4_25())
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_DivExpression_957_4_76() {
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    if (jj_scan_token(DIV))
      return true;
    if (jj_3R_PrimaryExpression_1059_4_21())
      return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_VarDeclaration_304_4_13())
      return true;
    return false;
  }

  static private boolean jj_3R_FalseLiteral_1142_4_61() {
    if (jj_scan_token(FALSE))
      return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public A1JavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x10000000, 0x2000, 0x10000000, 0x0, 0x0, 0x8000000, 0x2000, 0x0, 0x0, 0x2000, 0x0, 0x2000,
        0x84000200, 0x0, 0x84000200, 0x84000200, 0x0, 0x84000200, 0x0, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x0, 0x12903, 0x0, 0x80, 0x80, 0x14010, 0x12903, 0x80000, 0x14010, 0x0, 0x2003, 0x12903,
        0x19840, 0x1, 0x19840, 0x19840, 0x80000, 0x19840, 0x10800, };
  }

  static final private JJCalls[] jj_2_rtns = new JJCalls[21];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public A1JavaParser(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public A1JavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try {
      jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new A1JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public A1JavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new A1JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(stream, 1, 1);
    } else {
      jj_input_stream.ReInit(stream, 1, 1);
    }
    if (token_source == null) {
      token_source = new A1JavaParserTokenManager(jj_input_stream);
    }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public A1JavaParser(A1JavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(A1JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }

  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();

  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0;
      Token tok = token;
      while (tok != null && tok != jj_scanpos) {
        i++;
        tok = tok.next;
      }
      if (tok != null)
        jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind)
      return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos)
      throw jj_ls;
    return false;
  }

  /** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
      return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

  /** Trace enabled. */
  static final public boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 21; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0:
                jj_3_1();
                break;
              case 1:
                jj_3_2();
                break;
              case 2:
                jj_3_3();
                break;
              case 3:
                jj_3_4();
                break;
              case 4:
                jj_3_5();
                break;
              case 5:
                jj_3_6();
                break;
              case 6:
                jj_3_7();
                break;
              case 7:
                jj_3_8();
                break;
              case 8:
                jj_3_9();
                break;
              case 9:
                jj_3_10();
                break;
              case 10:
                jj_3_11();
                break;
              case 11:
                jj_3_12();
                break;
              case 12:
                jj_3_13();
                break;
              case 13:
                jj_3_14();
                break;
              case 14:
                jj_3_15();
                break;
              case 15:
                jj_3_16();
                break;
              case 16:
                jj_3_17();
                break;
              case 17:
                jj_3_18();
                break;
              case 18:
                jj_3_19();
                break;
              case 19:
                jj_3_20();
                break;
              case 20:
                jj_3_21();
                break;
            }
          }
          p = p.next;
        } while (p != null);

      } catch (LookaheadSuccess ls) {
      }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p = p.next = new JJCalls();
        break;
      }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la;
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
  static NodeToken makeNodeToken(Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
