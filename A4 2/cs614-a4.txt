CS614 Advanced Compilers (Spring 2025)
======================================

"Assignment 4: PolyGone: Eliminating Polymorphism with PTA"

ðŸ—“ Due: April 12, 2025, at 11:55 PM


## SPECIFICATION

Goal: Use JavaCC+JTB to transform a polymorphic callsite to a static callsite if possible. 

Breif Deatils: 
    * You should maintain a flow-sensitive intraprocedural points-to-analysis (PTA) information. 
    * Transform a virtual call <invokeVirtual> to a static call <invokeStatic>, if the callsite is known to be monomorphic.
    * All the new static version of the methods should come at the end after all the virtual methods have been defined.
    * Note that: You may want to typecast the "this" pointer passed as the parameter with the receiver object run-time type. 
    * New Additions in the grammar:
        - Support for static methods. 
        - Support for load statement.
        - Support for type cast.
        - Support for "this" in load statement.

## Provided inputs:
    - This file (cs614-a4.txt)
    - Grammar for input programs (a4java.jj)
    - Public testcases and answers (inside "a4-ptestcase/")
    - Checklist to be filled and submitted (checklist.txt)
    - Sample Main.java (edit it to include calls to your visitors)

## Output format:
    - A tranformed java code, where based on the points-to-analysis results monomorphic virtual calls are replaced by a static call.

## Assumptions that you can make:
    - All testcases would be valid Java programs, devoid of syntax errors, and parsable using the a2java grammar.
    - Method overloading is ignored.
    - Recursion is ignored.
    - Feel free to reuse your own code from A1 for maintaining the class hierarchy and method-overriding information.

## Before Submission: 
    - Make sure that your generated transformed code parses the grammar and gives the same output as the original program.
    - Make sure to check your submission on CompL Validator. (http://cs614.cse.iitb.ac.in:8080)

## SUBMISSION INSTRUCTIONS (to be followed strictly):
    1. Your submission on Moodle should be a file "rollnum-a4.zip", where "rollnum" is your roll number in small letters.
    2. Upon unzipping the zip file, we should get a directory named "rollnum-a4", which contains the following:
        a. Main.java, which reads the testcase from standard input, calls appropriate visitors, and prints on standard output
        b. All your visitors inside the "visitor" directory
        c. Other Java files and the "syntaxtree" directory as generated using JTB and JavaCC
        d. Honestly and completely filled "checklist.txt"
    3. Your submission should not have any .class or .jar files
    4. "javac Main.java" should work, and (ideally) "java Main < test", where "test" is the path to a testcase file, should print the expected output on screen
    5. For each testcase, we would redirect your output to a file, compile it, and execute the generated bytecode. The program should compile (do not change class and method names), produce the same output as before. If it does, we would count the number of constants in your generated program and match it with the expected output.
    6. Make sure you do not print any extra outputs; remember to comment out any debugging code that you use before submission.


## PLAGIARISM NOTE:
    This is an individual assignment. You are free to discuss with classmates publicly on Slack and ask your queries to the TAs or the Instructor in the class or in the office hours. However, you should neither look at the code of anybody else nor use/share the code written by anyone else (including sources from the Internet). Any violations should be reported proactively in the checklist file.

    Any detected plagiarism (give and take equal) would be treated strictly as per the policy announced in the first class.

    Plagiarism is a disservice to the teaching and learning process, and is a punishable offence at workplaces. Do the assignment honestly and enjoy learning the course.

