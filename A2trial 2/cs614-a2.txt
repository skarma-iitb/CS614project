CS614 Advanced Compilers (Spring 2025)
======================================

Assignment 2 (Due Feb 22, 11:55 PM)


## SPECIFICATION

Goal: Use JavaCC+JTB to perform simple constant propagation, with statically resolvable methods (using CHA) inlined at their call-sites.

### Provided inputs:
    - This file (cs614-a2.txt)
    - Grammar for input programs (a2java.jj)
    - Public testcases and answers (inside "tests/")
    - Checklist to be filled and submitted (checklist.txt)
    - Sample Main.java (edit it to include calls to your visitors)

### Output format:
    - Consult the testcases and expected answers present in the "tests" directory.
    - Ignore the main class.
    - Inline methods if possible (only one level, not transitively), based on CHA, and perform simple constant propagation over the control-flow graph. You need to print the remaining program as it is (through visitors). The final expectation, for each testcase, is a compilable program that produces the same output as the testcase with possible constants propagated and expressions folded.

### Assumptions that you can make:
    - All testcases would be valid Java programs, devoid of syntax errors, and parsable using the a2java grammar.
    - Method overloading is ignored. Same goes for recursion.
    - You are provided a control-flow graph implementation, which you can access using the following APIs:

	1. Creation of the CFG
...
Node root = new FriendTJ(System.in).Goal();
CFGGen cfgGen = new CFGGen();
root.accept(cfgGen);
ProgramCFG programCFG = cfgGen.getCFG();
...

	2. Traversing and printing the CFG (console)
The "ProgramCFG" class provides a field named "classMethodList" which provides a map from ClassName -> Set<MethodNamed> or HashMap<String, Set<String>>.
Given a methodname, its corresponding data can be obtained from "methodBBSet".
...
// For iterating over the program
for (String className : programCFG.classMethodList.keySet()) {
   Set<String> methodList = programCFG.classMethodList.get(className);
   System.out.println("Class: " + className);
   for (String methodName : methodList) {
      System.out.println("Method: " + methodName);
      BB currentMethodBB = programCFG.methodBBSet.get(methodName);
      BB.printBB(currentMethodBB);
   }
}
...

	3. BB Structure
A BB class contains just a set of instructions which can be iterated over by using the field "instructions". It also contains other useful fields "incomingEdges" and "outgoingEdges" which provide a set of incoming/outgoing "BB"s.

	4. [Bonus] Printing CFG to DOT (GraphViz Format)
If you want to visualize a CFG, given a Control Flow Graph object, you can save it to a ".DOT" file using the "BB.printBBDOT(programCFGObject);". This helps in debugging.

    - Feel free to reuse your own code from A1 for maintaining the class hierarchy and method-overriding information.

## SUBMISSION INSTRUCTIONS (to be followed strictly):
    1. Your submission on Moodle should be a file "rollnum-a2.zip", where "rollnum" is your roll number in small letters.
    2. Upon unzipping the zip file, we should get a directory named "rollnum-a2", which contains the following:
        a. Main.java, which reads the testcase from standard input, calls appropriate visitors, and prints on standard output
        b. All your visitors inside the "visitor" directory
        c. Other Java files and the "syntaxtree" directory as generated using JTB and JavaCC
        d. Honestly and completely filled "checklist.txt"
    3. Your submission should not have any .class or .jar files
    4. "javac Main.java" should work, and (ideally) "java Main < test", where "test" is the path to a testcase file, should print the expected output on screen
    5. For each testcase, we would redirect your output to a file, compile it, and execute the generated bytecode. The program should compile (do not change class and method names), produce the same output as before. If it does, we would count the number of constants in your generated program and match it with the expected output.
    6. Make sure you do not print any extra outputs; remember to comment out any debugging code that you use before submission.


## PLAGIARISM NOTE:
    This is an individual assignment. You are free to discuss with classmates publicly on Slack and ask your queries to the TAs or the Instructor in the class or in the office hours. However, you should neither look at the code of anybody else nor use/share the code written by anyone else (including sources from the Internet). Any violations should be reported proactively in the checklist file.

    Any detected plagiarism (give and take equal) would be treated strictly as per the policy announced in the first class.

    Plagiarism is a disservice to the teaching and learning process, and is a punishable offence at workplaces. Do the assignment honestly and enjoy learning the course.

